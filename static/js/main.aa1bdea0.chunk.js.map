{"version":3,"sources":["Clock.tsx","TodoList.tsx","App.tsx","index.tsx"],"names":["Clock","props","state","time","Date","this","setState","setInterval","tick","message","toLocaleTimeString","getSeconds","className","Component","TodoItem","type","checked","completed","onChange","handleToggleCompletion","item","TodoList","listItems","i","isCompleted","hideCompleted","newItem","items","e","key","push","length","id","name","placeholder","value","newEntryText","handleNewEntryTextChange","onClick","handleAddNewEntry","handleToggleHideCompleted","App","bind","target","concat","map","c","j","React","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.aa1bdea0.chunk.js","sourcesContent":["import React, { Component } from 'react'; // let's also import Component\nimport './Clock.css';\n\n// the clock's state has one field: The current time, based upon the\n// JavaScript class Date\ntype ClockState = {\n  time: Date\n}\n\n// Clock has no properties, but the current state is of type ClockState\n// The generic parameters in the Component typing allow to pass props\n// and state. Since we don't have props, we pass an empty object.\nexport default class Clock extends Component<{}, ClockState> {\n\n  // annotate the type of props since typescript will not compile implicit any\n  constructor(props: {}) {\n    super(props);\n    this.state = {\n      time: new Date()\n    };\n  }\n\n  // The tick function sets the current state. TypeScript will let us know\n  // which ones we are allowed to set.\n  tick() {\n    this.setState({\n      time: new Date()\n    });\n  }\n\n  // After the component did mount, we set the state each second.\n  componentDidMount() {\n    setInterval(() => this.tick(), 1000);\n  }\n\n  // render will know everything!\n  render() {\n    let message = \"The current time is \" + this.state.time.toLocaleTimeString();\n\n    // let s = this.state.time.getSeconds();\n\n    if (this.state.time.getSeconds() % 5 === 0) {\n        return <p className=\"highlight-10\">{ message }</p>\n    } else {\n        return <p>{ message }</p>\n    }\n  }\n}\n","import React, { Component, ChangeEvent } from 'react';\nimport './TodoList.css';\n\ntype TodoProps = {\n    name: string,\n    items: string[],\n    completed: boolean[],\n    newEntryText: string,\n    hideCompleted: boolean,\n    handleAddNewEntry: () => void,\n    handleNewEntryTextChange: (e: ChangeEvent<HTMLInputElement>) => void,\n    handleToggleCompletion: (e: ChangeEvent<HTMLInputElement>, i: number) => void,\n    handleToggleHideCompleted: (e: ChangeEvent<HTMLInputElement>) => void,\n}\n\ntype TodoItemProps = {\n    item: string,\n    completed: boolean,\n    handleToggleCompletion: (e: ChangeEvent<HTMLInputElement>) => void,\n}\n\nclass TodoItem extends Component<TodoItemProps, {}> {\n    render() {\n        return <li>\n            <input\n                type=\"checkbox\"\n                checked={this.props.completed}\n                onChange={this.props.handleToggleCompletion}\n            />\n            <span>{this.props.item}</span>\n        </li>;\n    }\n}\n\nexport default class TodoList extends Component<TodoProps, {}> {\n    render() {\n        let listItems = [];\n        for (let i = 0; i < this.props.items.length; i++) {\n            const isCompleted = this.props.completed[i];\n            if (this.props.hideCompleted && isCompleted) {\n                continue;\n            }\n            let newItem = <TodoItem\n                item={this.props.items[i]}\n                completed={isCompleted}\n                handleToggleCompletion={(e) => this.props.handleToggleCompletion(e, i)}\n                key={i}\n            />;\n            listItems.push(newItem);\n        }\n\n        return <div id=\"todoList\">\n            <h1>todo list named \"{this.props.name}\"</h1>\n            <div id=\"listContainer\">\n                <input id=\"newEntryInput\" type=\"text\" placeholder=\"New entry\"\n                    value={this.props.newEntryText}\n                    onChange={this.props.handleNewEntryTextChange}/>\n                <button onClick={this.props.handleAddNewEntry}>Add</button>\n                <span>\n                    <input type=\"checkbox\" onChange={this.props.handleToggleHideCompleted} />\n                    Hide completed\n                </span>\n                <ul>\n                    {listItems}\n                </ul>\n            </div>\n            </div>;\n    }\n\n}","import React, { ChangeEvent } from 'react';\nimport './App.css';\nimport Clock from './Clock';\nimport TodoList from './TodoList';\n\ninterface TodoState {\n    name: string,\n    items: string[],\n    completed: boolean[],\n    newEntryText: string,\n    hideCompleted: boolean,\n}\n\n//const App: React.FC = () => {\nclass App extends React.Component<{}, TodoState> {\n  constructor(props: {}) {\n    super(props);\n\n    this.state = {\n      name: \"test-list-1\",\n      items: [\"take a shower\", \"take out the trash\", \"C\"],\n      completed: [false, true, false],\n      newEntryText: \":)\",\n      hideCompleted: false,\n    }\n\n    this.handleAddNewEntry = this.handleAddNewEntry.bind(this);\n    this.handleNewEntryTextChange = this.handleNewEntryTextChange.bind(this);\n    this.handleToggleCompletion = this.handleToggleCompletion.bind(this);\n    this.handleToggleHideCompleted = this.handleToggleHideCompleted.bind(this);\n  }\n\n  handleNewEntryTextChange(e: ChangeEvent<HTMLInputElement>) {\n    this.setState({newEntryText: e.target.value});\n  }\n\n  handleAddNewEntry() {\n    this.setState((state, props) => ({\n      items: state.items.concat(state.newEntryText),\n      completed: this.state.completed.concat(false),\n      newEntryText: '',\n    }));\n  }\n\n  handleToggleCompletion(e: ChangeEvent<HTMLInputElement>, i: number) {\n    this.setState((state, props) => {\n      let newCompleted = this.state.completed.map((c, j) => (i === j) ? !c : c)\n      return {\n        completed: newCompleted,\n      };\n    });\n  }\n\n  handleToggleHideCompleted(e: ChangeEvent<HTMLInputElement>) {\n    this.setState((state, props) => ({\n      hideCompleted: !state.hideCompleted\n    }));\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <p>hello, react + typescript</p>\n        </header>\n        <main>\n          <Clock />\n          <hr />\n          <TodoList\n            name={this.state.name}\n            items={this.state.items}\n            completed={this.state.completed}\n            newEntryText={this.state.newEntryText}\n            hideCompleted={this.state.hideCompleted}\n            handleAddNewEntry={this.handleAddNewEntry}\n            handleNewEntryTextChange={this.handleNewEntryTextChange}\n            handleToggleCompletion={this.handleToggleCompletion}\n            handleToggleHideCompleted={this.handleToggleHideCompleted}\n          />\n        </main>\n      </div>\n    );\n  }\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}