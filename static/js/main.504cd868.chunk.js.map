{"version":3,"sources":["Clock.tsx","TodoList.tsx","DataBackend.tsx","App.tsx","index.tsx"],"names":["Clock","props","state","time","Date","this","setState","setInterval","tick","message","toLocaleTimeString","getSeconds","className","Component","TodoItem","itemDisplay","editingEntryInfo","type","value","text","onChange","handleEditingEntryTextChange","onClick","handleSaveEntryText","handleCancelEditingEntry","onDoubleClick","handleDoubleClick","item","checked","completed","handleToggleCompletion","TodoList","listItems","i","isCompleted","hideCompleted","info","id","newItem","items","handleStartEditingEntry","e","key","push","length","placeholder","newEntryText","handleNewEntryTextChange","handleAddNewEntry","handleToggleHideCompleted","LocalStorageBackend","localStorage","getItem","setItem","App","backend","savedState","getState","name","bind","persistState","target","Object","assign","set","JSON","stringify","parse","get","concat","map","c","j","React","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.504cd868.chunk.js","sourcesContent":["import React, { Component } from 'react'; // let's also import Component\nimport './Clock.css';\n\n// the clock's state has one field: The current time, based upon the\n// JavaScript class Date\ntype ClockState = {\n  time: Date\n}\n\n// Clock has no properties, but the current state is of type ClockState\n// The generic parameters in the Component typing allow to pass props\n// and state. Since we don't have props, we pass an empty object.\nexport default class Clock extends Component<{}, ClockState> {\n\n  // annotate the type of props since typescript will not compile implicit any\n  constructor(props: {}) {\n    super(props);\n    this.state = {\n      time: new Date()\n    };\n  }\n\n  // The tick function sets the current state. TypeScript will let us know\n  // which ones we are allowed to set.\n  tick() {\n    this.setState({\n      time: new Date()\n    });\n  }\n\n  // After the component did mount, we set the state each second.\n  componentDidMount() {\n    setInterval(() => this.tick(), 1000);\n  }\n\n  // render will know everything!\n  render() {\n    let message = \"The current time is \" + this.state.time.toLocaleTimeString();\n\n    // let s = this.state.time.getSeconds();\n\n    if (this.state.time.getSeconds() % 5 === 0) {\n        return <p className=\"highlight-10\">{ message }</p>\n    } else {\n        return <p>{ message }</p>\n    }\n  }\n}\n","import React, { Component, ChangeEvent } from 'react';\nimport './TodoList.css';\n\ntype TodoProps = {\n    name: string,\n    items: string[],\n    completed: boolean[],\n    newEntryText: string,\n    editingEntryInfo: {text: string, id: number} | null,\n    hideCompleted: boolean,\n    handleAddNewEntry: () => void,\n    handleCancelEditingEntry: () => void,\n    handleEditingEntryTextChange: (e: ChangeEvent<HTMLInputElement>) => void,\n    handleNewEntryTextChange: (e: ChangeEvent<HTMLInputElement>) => void,\n    handleSaveEntryText: () => void,\n    handleStartEditingEntry: (i: number) => void,\n    handleToggleCompletion: (e: ChangeEvent<HTMLInputElement>, i: number) => void,\n    handleToggleHideCompleted: (e: ChangeEvent<HTMLInputElement>) => void,\n}\n\ntype TodoItemProps = {\n    item: string,\n    completed: boolean,\n    editingEntryInfo: {text: string, id: number} | null,\n    handleCancelEditingEntry: () => void,\n    handleDoubleClick: () => void,\n    handleEditingEntryTextChange: (e: ChangeEvent<HTMLInputElement>) => void,\n    handleSaveEntryText: () => void,\n    handleToggleCompletion: (e: ChangeEvent<HTMLInputElement>) => void,\n}\n\nclass TodoItem extends Component<TodoItemProps, {}> {\n    render() {\n        let itemDisplay = this.props.editingEntryInfo != null\n            ? <span>\n                <input type=\"text\" className=\"editing\"\n                    value={this.props.editingEntryInfo.text}\n                    onChange={this.props.handleEditingEntryTextChange}/>\n                <button onClick={this.props.handleSaveEntryText}>Save</button>\n                <button onClick={this.props.handleCancelEditingEntry}>Cancel</button>\n              </span>\n            : <span onDoubleClick={this.props.handleDoubleClick}>{this.props.item}</span>;\n        return <li>\n            <input\n                type=\"checkbox\"\n                checked={this.props.completed}\n                onChange={this.props.handleToggleCompletion}\n            />\n           {itemDisplay}\n        </li>;\n    }\n}\n\nexport default class TodoList extends Component<TodoProps, {}> {\n    render() {\n        let listItems = [];\n        for (let i = 0; i < this.props.items.length; i++) {\n            const isCompleted = this.props.completed[i];\n            if (this.props.hideCompleted && isCompleted) {\n                continue;\n            }\n            // TODO: more concise? what does `this.props.editingInfo?.id` do?\n            let info =\n                (this.props.editingEntryInfo != null && i === this.props.editingEntryInfo!.id)\n                ? this.props.editingEntryInfo\n                : null;\n\n            let newItem = <TodoItem\n                item={this.props.items[i]}\n                completed={isCompleted}\n                editingEntryInfo={info}\n                handleCancelEditingEntry={this.props.handleCancelEditingEntry}\n                handleDoubleClick={() => this.props.handleStartEditingEntry(i)}\n                handleEditingEntryTextChange={this.props.handleEditingEntryTextChange}\n                handleSaveEntryText={this.props.handleSaveEntryText}\n                handleToggleCompletion={(e) => this.props.handleToggleCompletion(e, i)}\n                key={i}\n            />;\n            listItems.push(newItem);\n        }\n\n        return <div id=\"todoList\">\n            <h1>to-do</h1>\n            <div id=\"listContainer\">\n                <input id=\"newEntryInput\" type=\"text\" placeholder=\"New entry\"\n                    value={this.props.newEntryText}\n                    onChange={this.props.handleNewEntryTextChange}/>\n                <button onClick={this.props.handleAddNewEntry}>Add</button>\n                <div id=\"hideCompleted\">\n                    <input type=\"checkbox\"\n                        checked={this.props.hideCompleted}\n                        onChange={this.props.handleToggleHideCompleted} />\n                    Hide completed\n                </div>\n                <ul>\n                    {listItems}\n                </ul>\n            </div>\n            </div>;\n    }\n\n}","export interface DataBackend {\n    get(key: string): string | null;\n    set(key: string, value: string): void;\n}\n\nexport class LocalStorageBackend implements DataBackend {\n    get(key: string): string | null {\n        return localStorage.getItem(key);\n    }\n\n    set(key: string, value: string) {\n        localStorage.setItem(key, value);\n    }\n\n}","import React, { ChangeEvent } from 'react';\nimport './App.css';\nimport Clock from './Clock';\nimport TodoList from './TodoList';\nimport { DataBackend, LocalStorageBackend } from './DataBackend';\n\ninterface TodoState {\n    name: string,\n    items: string[],\n    completed: boolean[],\n    newEntryText: string,\n    editingEntryInfo: {text: string, id: number} | null,\n    hideCompleted: boolean,\n}\n\n//const App: React.FC = () => {\nclass App extends React.Component<{}, TodoState> {\n  backend: DataBackend\n\n  constructor(props: {}) {\n    super(props);\n\n    this.backend = new LocalStorageBackend();\n\n    let savedState = this.getState();\n    if (savedState != null) {\n      this.state = savedState;\n    } else {\n      this.state = {\n        name: \"test-list-1\",\n        items: [\"take a shower\", \"take out the trash\", \"C\"],\n        completed: [false, true, false],\n        newEntryText: \":)\",\n        editingEntryInfo: null,\n        hideCompleted: false,\n      }\n    }\n\n    this.handleAddNewEntry = this.handleAddNewEntry.bind(this);\n    this.handleNewEntryTextChange = this.handleNewEntryTextChange.bind(this);\n\n    this.handleCancelEditingEntry = this.handleCancelEditingEntry.bind(this);\n    this.handleEditingEntryTextChange = this.handleEditingEntryTextChange.bind(this);\n    this.handleSaveEntryText = this.handleSaveEntryText.bind(this);\n    this.handleStartEditingEntry = this.handleStartEditingEntry.bind(this);\n\n    this.handleToggleCompletion = this.handleToggleCompletion.bind(this);\n    this.handleToggleHideCompleted = this.handleToggleHideCompleted.bind(this);\n  }\n\n  componentDidUpdate() {\n    this.persistState();\n  }\n\n  handleStartEditingEntry(id: number) {\n    this.setState((state, props) => ({\n      editingEntryInfo: {\n        text: state.items[id],\n        id: id\n      }\n    }));\n  }\n\n  handleEditingEntryTextChange(e: ChangeEvent<HTMLInputElement>) {\n    let newEntryText = e.target.value;\n    this.setState((state, props) => {\n      if (state.editingEntryInfo == null) {\n        return null;\n      }\n      let newInfo = Object.assign({}, state.editingEntryInfo, { text: newEntryText });\n      return {\n        editingEntryInfo: newInfo,\n      };\n    });\n  }\n\n  persistState() {\n    this.backend.set(\"rttodo_state\", JSON.stringify(this.state));\n  }\n\n  getState() {\n    return JSON.parse(this.backend.get(\"rttodo_state\") || \"null\")\n  }\n\n  handleNewEntryTextChange(e: ChangeEvent<HTMLInputElement>) {\n    this.setState({newEntryText: e.target.value});\n  }\n\n  handleAddNewEntry() {\n    this.setState(\n      (state, props) => ({\n        items: state.items.concat(state.newEntryText),\n        completed: this.state.completed.concat(false),\n        newEntryText: '',\n      })\n    );\n  }\n\n  handleToggleCompletion(e: ChangeEvent<HTMLInputElement>, i: number) {\n    // TODO: persist to a backend\n    this.setState(\n      (state, props) => {\n        let newCompleted = state.completed.map((c, j) => (i === j) ? !c : c)\n        return {\n          completed: newCompleted,\n        };\n      }\n    );\n  }\n\n  handleToggleHideCompleted(e: ChangeEvent<HTMLInputElement>) {\n    // TODO: persist to a backend\n    this.setState(\n      (state, props) => ({\n        hideCompleted: !state.hideCompleted\n      })\n    );\n  }\n\n  handleSaveEntryText() {\n    // TODO: persist to a backend\n    this.setState((state, props) => {\n      // use state.editingEntryText;\n      if (state.editingEntryInfo == null) {\n        return null;\n      }\n      let updatedItems = state.items.map((item, i) =>\n        (state.editingEntryInfo!.id === i)\n          ? state.editingEntryInfo!.text\n          : item);\n      return {\n        items: updatedItems,\n        editingEntryInfo: null,\n      };\n    });\n  }\n\n  handleCancelEditingEntry() {\n    this.setState((state, props) => ({\n        editingEntryInfo: null,\n    }));\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <p>hello, react + typescript</p>\n        </header>\n        <main>\n          <Clock />\n          <hr />\n          <TodoList\n            name={this.state.name}\n            items={this.state.items}\n            completed={this.state.completed}\n            newEntryText={this.state.newEntryText}\n            editingEntryInfo={this.state.editingEntryInfo}\n            hideCompleted={this.state.hideCompleted}\n            handleAddNewEntry={this.handleAddNewEntry}\n            handleCancelEditingEntry={this.handleCancelEditingEntry}\n            handleEditingEntryTextChange={this.handleEditingEntryTextChange}\n            handleNewEntryTextChange={this.handleNewEntryTextChange}\n            handleSaveEntryText={this.handleSaveEntryText}\n            handleStartEditingEntry={this.handleStartEditingEntry}\n            handleToggleCompletion={this.handleToggleCompletion}\n            handleToggleHideCompleted={this.handleToggleHideCompleted}\n          />\n        </main>\n      </div>\n    );\n  }\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}